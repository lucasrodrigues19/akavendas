
AULA 1
	1 - npm install --global yarn -> gerenciador de dependencias e build
	2 - npx create-react-app frontend --template typescript-> criando uma estrutura do app react com o nome frontend e linguagem basica typescript
	3 - excluir a pasta .git do projeto fontend
	4 - ver se está funcionando: dentro da pasta frontend, comando yarn start, para parar CTRL+C
	OBSERVAÇÕES
		caso der erro no maven, update project, ou apagar a pasta.m2(na pasta .m2 do seu usuário apagar a pasta .m2)
		erro do de jre, projeto/properties/java build path/libraries/jre system libraires/edit/
PAREI EM 37:35 Limpar o projeto js
	5 - Limpando o projeto react:
		Na pasta public deixar so index.html e favicon.ico, OBS: a div root é onde a aplicação vai rodar
		Em src, deixar apenas os arquivos: App.tsx, index.tsx, react-app-env.d.ts, setupTests.ts
	6 - Mexer no arquivo tsconfig.json, OBS é um arquivo que tem varias configurações para orientar como a com-
	   pilação do type-script vai acontecer
		No começo na chave "compilerOptions:{", inserir: baseUrl: ".src/", isso é para orientar o typescript
		que os arquivos que irei importar ta apartir de .src
	7 - adicionar Arquivo /public/_redirects: é necessario para que rode bem no Netflix, no conteudo colocar: 
		/index.html 200
	8 - limpar os imports que deletei em App.tsx
	
	9 - Em app.tsx, ex:
				function App() {
  						return (
     							 <div>
     							  <h1>Olá Mundo</h1>
     							 </div>
  							);
						}
	Minha aplicação vai retornar uma </div>
	10 - limpar o arquivo index.tsx
PAREI EM 48:50 Adicionando o bootstrap
	11 - site getbootstrap.com, um site que ja tem uma estrutura pronta para designe
	12 - no terminal do frontend, roda o comando yarn add bootstrap(Qualquer dependencia que faltar, tipo jquery, adicionar)
	13 - Além de instalar no yarn, no index.tsx, adicionar o import 'bootstrap/dist/css/bootstrap.css'
	14 - adicionar o assets(recursos) src/assets/css
	15 - adicionar estilos
	:root { //adicionando variaveis
    		--color-primary: #FF8400;
	}
	16 - no index, importar o nosso arquivo do assets
	17 - adicionando componentes
PAREI EM 01:01:29
	18 - A base do ract é componente, componente é uma função(pode ter uma logica antes de retornar o html) js que retorna um codigo html
	     um exemplo de componente é do arquivo App.tsx
	     tem uma função App, e o comando: export default App, diz que App é visivel para outros arquivos.
	     O index.html é alimentado pelo index.tsx, que chama a função App e alimenta a tag root, lembrando que App vai ser 
	    um componente setado na div root no index.html
	19: Exemplos de codigo html, pegar no site getBootstrap
	20: ex de importar uma imagem para usar no html codigo(<img src={imgLogoAka}) :import imgLogoAka from '../../assets/img/aka-logotipo.jpeg';
	Em uma função que retorna um componente, pode apenas retornar um elemento,quando tiver dois elementos usar desse jeito:
		 <>
      			<NavBar />
      				<div>
       				 <h1 className="text-primary">AKA Vendas</h1>

     				 </div>
   		 </>
PAREI EM 01:14:00



DOCUMENTAÇÂO PARA CODIGO:
	TABLE
	Site: https://getbootstrap.com/docs/5.0/content/tables/
	Referencia:
	<div className="table-responsive">
                <table className="table table-striped table-sm">
                    <thead>
                        <tr className="table-primary">
			</tr>
		   </thead>
		</table>
	ICONES
	COMANDO yarn add i bootstrap-icons
	Site: https://icons.getbootstrap.com
	Importar: import 'bootstrap-icons/font/bootstrap-icons.css';
	
(ADICIONAR REFERENCIA DO FOOTER)
PAREI EM 01:15:00

	21 - Adicionar chart:
		yarn add apexcharts
		yarn add react-apexcharts
	22 - Exemplos de graficos apexcharts.com
PAREI EN 01:22:40

PAREI EM 01:36:00 DA AULA 1

AULA 2
	Quando clona o projeto do git, ele não baixa as dependencias
	Cors: Por padrão uma aplicação não pode acessar outra aplicação que está em outro host
	1- CONFIGURAÇÃO DE SEGURANÇA -> Criar um serviço de segurança(Caso queira)
	2- Criar a regra de negocio ->
		Vendedor tem N vendas
		Não posso ter vendas sem o vendedor

	Seed no banco, é instanciar o banco com alguns dados 
	Configurando a aplicação, application-dev.properties
		spring.jpa.open-in-view=false -> não quero ter transação com o banco na controller, so na service e DAO
		spring.datasource.url=jdbc:h2:mem:testdb -> caminho que vou acessar em memoria
		spring.datasource.username=sa
		spring.datasource.password=
		//Cliente de administraçaõ do h2, vou acessar do navegador para gerenciar meu banco de dados
		spring.h2.console.enabled=true 
		spring.h2.console.path=/h2-console
		spring.jpa.show-sql=true
		spring.jpa.properties.hibernate.format_sql=true

	Adicionar o arquivo data.sql

PAREI NO 40:00:00

	Configurando o perfil teste para liberar a visualização no H2

	Entre a camada de serviço e o controlador vou trafegar DTO( representa uma domain em determinado contexto )
	Toda a parte de transação com o banco, quero resolver na camada de serviço, assim copio os dados da domain para o DTO.

	POSTMAN
		Adicionane uma coleção;
		Adicione a requisição na coleção criada;
		Adicione um ambiente (serve para armzenar o valor dp camninho da requisição em uma variavel, Ex: {{host}}(host  = http://localhost))

	DADOS POR PAGINAÇÃO
		Quando tenho muitos dados, não busco todos de vez, busco de pouco em pouco
		Para fazer isso no sua service no metodo que ira trazer os dados, adicionar o atributo Pageable, Ex: Pageable pageable import org.springframework.data.domain.Pageable;
		no jpaRepository, ja tem um método que passa um Pageable como parametro e retorna um Page
		Não esquecer de colocar o Pageable no metodo do endpoint da controller
PAREI EM 01:18:00 (Requisição para paginação no postman )
    PASSO 4		
	Paginação na requisição:
		Na requisição, para paginar pode passar como parametro o page EX: http://localhost/sales?page=2, quer dizer que quero a pagina 2 dos dados
		Posso dizer qual vai ser o tamanho da pagina http://localhost/sales?page=2&size=10, quer dizer que quero a pagina 2 com o tamanho 10(nesse caso 10 vendas)
		Ordenando por data: http://localhost/sales?page=2&size=10&sort=date,desc(o desc funciona para o dado mais recente para o mais antigo)
	Evitar interações repetidas no banco
		Quando tenho um objeto de muitos para 1, o JPA faz a busca automaticamente no banco
		para resolver isso, nesse caso especifico, como são poucos dados, posso buscar os dados do relacionamento 
		primeiro, assim ele faz um cash deles em memoria, ai o JPA ja vai ver que foi buscado em memoria, e não busca no banco
		EM CIMA DE UM MÉTODO NA SERVICE
		@Transactional(readOnly = true) (O import tem que ser do spring)//isso é para que toda operação no banco seja tratada na service, e readOnly é para não dar lock no banco, por que é so leitura
   PASSO 5
	Buscas agrupadas
		@Query("SELECT new br.com.akasystem.akavendas.entities.dto.SaleSumDTO(obj.seller, SUM(obj.amount))"
			+ " FROM SaleAK AS obj GROUP BY obj.seller")//consulta costumizada: 1- assina o metodo e depois especifica a consulta
		//Estou fazendo uma consulta na classe Sale agrupando pelos vendedores
		List<SaleSumDTO> amountGroupBySeller();
PAREI EM 01:44:00 
	criando pesquisa de soma agrupada por sale
	Validação do postgres no local
		Criando 3 perfis de projeto: test(h2), dev(postgres), prod(herocku)
PAREI EM 01:55:00 
	Validando o posgres, perfil dev
	Para que crie script  e associe a um arquivo sql
		spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
		spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
		spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
		spring.jpa.properties.hibernate.hbm2ddl.delimiter;
	Depois precisa comentar tudo de novo
	perfil prod:
		spring.datasource.url=${DATABASE_URL} //pegando os dados de uma variavel de ambiente do heroku
	no aplication.properties
		spring.profiles.active=${APP_PROFILE:test} // se a variavel não estiver definida no ambiente, vai usar o perfil test
	Arquivo: system.properties( de extrema importancia, para não da erro no heroku)
		  precisa criar esse arquivo na raiz do projeto(não pode ter espaço em branco no final)
	em system.properties
		java.runtime.version=11

AREI EM 02:05:00 ->configuração no heroku
	Preparar o projeto para ser implantado = homolgação
	
No heroku:
	create new app
	Adicionar um banco: resources -> adons "postgres"
	Adicionar uma variavel: settings
	config vars -> reveal config vars
	CONECTAR NO PG ADMIN:
		pegar o valor da variavel de ambiente DATA_BASE_URL
		postgres://
hmjlemxxmfapbu  user
8f1463494ca45efd86739a4aed4dcadf0ea9b10845ec85cc07121999a8ee6ebe senha
@
ec2-50-17-255-120.compute-1.amazonaws.com host
:
5432 porta
/
d62pb15emse094 base de dados
	No pgAdmin:
		Criar um novo server com os dados acima.
		Na aba avancada, em dbRestricion, colocar o nome do banco, para não aparecer outros bancos
		rodar os scripts no banco
PRECISA INSTALAR O HEROKU
PAREI EM 02:12:00
	Precisa Instalar o heroku cli: https://devcenter.heroku.com/articles/heroku-cli#download-and-install
	
ATENÇÃO AO FAZER O DEPLOY
	git subtree push --prefix backend/akavendas heroku main --> caminho: backend/akavendas é o caminho do meu projeto a partir do diretorio de trabalho que estou
	
	Comandos utils, para fazer merge de uma branch com outra
	git merge <branch> --> mistura os commits(pega o que foi feito na branch e poem na outra, faço um commit adicional) sem precisar mexer na estrutura
	git rebase <branche> -> este comando une(deixa em um historico só) as branchs mas mexe nas estruturas
	git reset --hard {hash-do-commit-desejado} --> volta para o comit desejado
	git push -f origin main --> força a fazer um push depois de unificar as branchs e vc tiver certeza
	git pull origin master --allow-unrelated-histories --> permite que o git faça o merge com dois historicos diferentes
	Primeira homologação: c82f33bf
	


		