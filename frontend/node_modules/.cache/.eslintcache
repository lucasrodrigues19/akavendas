[{"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\index.tsx":"1","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\App.tsx":"2","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\navBar\\index.tsx":"3","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\footer\\index.tsx":"4","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\dataTable\\index.tsx":"5","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\BarChart\\index.tsx":"6","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\DonutChart\\index.tsx":"7","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\Routes.tsx":"8","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\pages\\dashboard\\index.tsx":"9","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\pages\\home\\index.tsx":"10","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\utils\\requests.ts":"11"},{"size":344,"mtime":1624109300152,"results":"12","hashOfConfig":"13"},{"size":108,"mtime":1624406236156,"results":"14","hashOfConfig":"13"},{"size":622,"mtime":1624406987946,"results":"15","hashOfConfig":"13"},{"size":2454,"mtime":1624405920724,"results":"16","hashOfConfig":"13"},{"size":1845,"mtime":1624109300149,"results":"17","hashOfConfig":"13"},{"size":972,"mtime":1624405914895,"results":"18","hashOfConfig":"13"},{"size":2693,"mtime":1624719346700,"results":"19","hashOfConfig":"13"},{"size":520,"mtime":1624406223766,"results":"20","hashOfConfig":"13"},{"size":1167,"mtime":1624406081791,"results":"21","hashOfConfig":"13"},{"size":888,"mtime":1624717431947,"results":"22","hashOfConfig":"13"},{"size":47,"mtime":1624569439620,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1u1rjkk",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\index.tsx",[],["49","50"],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\App.tsx",[],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\navBar\\index.tsx",[],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\footer\\index.tsx",[],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\dataTable\\index.tsx",[],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\BarChart\\index.tsx",["51"],"import Chart from 'react-apexcharts';\r\nimport { ModuleKind } from 'typescript';\r\nconst BarChart = () =>{\r\n    const options = {\r\n        plotOptions:{\r\n            bar: {\r\n                horizontal: true\r\n            }\r\n        },\r\n    };\r\n    const mockData = {\r\n        labels:{\r\n            categories: ['Anakin','Barry Allen','Kal-El','Logan','Padmé']\r\n        },\r\n        series:[\r\n\r\n            {\r\n                name: \"% Sucesso\",\r\n                data:[43.3,67.1,70.1,80.1,90]\r\n            }\r\n        ]\r\n    }\r\n    return(\r\n       <Chart\r\n            options={{...options,xaxis: mockData.labels,colors:[\"#7952b3\"]}} //ela vai ser incorporada na definição do tsx, to dizendo aproveitar o options e vou passar mais argumentos para ele\r\n            series={mockData.series}\r\n            type=\"bar\"\r\n            height=\"240\" \r\n       \r\n       /> //retorna o componente do apexcharts que instalei, passo os dados como parametro\r\n    );\r\n}\r\nexport default BarChart;","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\components\\DonutChart\\index.tsx",["52"],"import Chart from 'react-apexcharts';\r\nimport { ModuleKind } from 'typescript';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios'; \r\nimport { BASE_URL } from 'utils/requests';\r\nimport { SaleSum } from 'types/sale';\r\n\r\ntype ChartData = {\r\n    labels:string[];\r\n    series:number[];\r\n}\r\n\r\nconst DonutChart = () =>{\r\n    //chartData variavel que vai ser o dado, setChartData: função para alterar o dado, ChartData: tipo generico do chartData, entre () o valor inicial\r\n    const [chartData, setChartData] = useState<ChartData>({labels:[],series:[]})\r\n    //FORMA ERRADA, certo com o hocks, executando dessa forma, toda vez que o useState atualizar o estado, o componente vai verificar se tem algo para renderizar\r\n    // axios.get(`${BASE_URL}/sales/amount-by-seller`)\r\n    //     .then((_response) => {\r\n    //         const data = _response.data as SaleSum[]; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\r\n    //         const myLabels = data.map(x => x.sellerName);\r\n    //         const mySeries = data.map(x => x.sum)\r\n    //         setChartData({labels:myLabels, series: mySeries});\r\n    //         console.log(chartData)\r\n    //         console.log(_response.data)\r\n    //     })\r\n     //FORMA CORRETA, 1- primeiro parametro: a funçao que vai executar, 2 argumento: lista de objeto que o useEffect vai observar. com o useRequest, está ação so vai ser executada na\r\n    //instanciação do componente\r\n     // const mockData = {\r\n    //     series:[477138,799928,444867,220426,473088],\r\n    //     labels: ['Anakin','Barry Alen', 'Karl-el','Logan','Padmé']\r\n    // }\r\n    useEffect(()=>{\r\n        axios.get(`${BASE_URL}/sales/amount-by-seller`)\r\n        .then((_response) => {\r\n            const data = _response.data as SaleSum[]; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\r\n            const myLabels = data.map(x => x.sellerName);\r\n            const mySeries = data.map(x => x.sum)\r\n            setChartData({labels:myLabels, series: mySeries});\r\n        })\r\n    },[])\r\n    const options = {\r\n        legend:{\r\n            show:true\r\n        }\r\n    };\r\n    return(\r\n       <Chart\r\n            options={{...options,labels: chartData.labels,colors:[\"#A03EAF\",\"#78058A\",\"#6B3473\",\"#886B8D\",\"#4E015A\"]}} //ela vai ser incorporada na definição do tsx, to dizendo aproveitar o options e vou passar mais argumentos para ele\r\n            series={chartData.series}\r\n            type=\"donut\"\r\n            height=\"240\" \r\n       \r\n       /> //retorna o componente do apexcharts que instalei, passo os dados como parametro\r\n    );\r\n}\r\nexport default DonutChart;","D:\\bootcamp-spring-react\\workspace\\frontend\\src\\Routes.tsx",[],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\pages\\dashboard\\index.tsx",[],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\pages\\home\\index.tsx",[],"D:\\bootcamp-spring-react\\workspace\\frontend\\src\\utils\\requests.ts",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":2,"column":10,"nodeType":"59","messageId":"60","endLine":2,"endColumn":20},{"ruleId":"57","severity":1,"message":"58","line":2,"column":10,"nodeType":"59","messageId":"60","endLine":2,"endColumn":20},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'ModuleKind' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]