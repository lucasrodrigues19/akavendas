{"ast":null,"code":"var _jsxFileName = \"D:\\\\bootcamp-spring-react\\\\workspace\\\\frontend\\\\src\\\\components\\\\DonutChart\\\\index.tsx\";\nimport Chart from 'react-apexcharts';\nimport axios from 'axios';\nimport { BASE_URL } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DonutChart = () => {\n  //FORMA ERRADA, certo com o hocks\n  let chartData = {\n    labels: [],\n    series: []\n  };\n  axios.get(`${BASE_URL}/sales/amount-by-seller`).then(_response => {\n    const data = _response.data; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\n\n    const myLabels = data.map(x => x.sellerName);\n    const muSeries = data.map(x => x.sum);\n    console.log(_response.data);\n  });\n  const options = {\n    legend: {\n      show: true\n    }\n  }; // const mockData = {\n  //     series:[477138,799928,444867,220426,473088],\n  //     labels: ['Anakin','Barry Alen', 'Karl-el','Logan','Padmé']\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: chartData.labels,\n      colors: [\"#A03EAF\", \"#78058A\", \"#6B3473\", \"#886B8D\", \"#4E015A\"]\n    } //ela vai ser incorporada na definição do tsx, to dizendo aproveitar o options e vou passar mais argumentos para ele\n    ,\n    series: chartData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 8\n  }, this) //retorna o componente do apexcharts que instalei, passo os dados como parametro\n  ;\n};\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["D:/bootcamp-spring-react/workspace/frontend/src/components/DonutChart/index.tsx"],"names":["Chart","axios","BASE_URL","DonutChart","chartData","labels","series","get","then","_response","data","myLabels","map","x","sellerName","muSeries","sum","console","log","options","legend","show","colors"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;AAQA,MAAMC,UAAU,GAAG,MAAK;AAEpB;AACA,MAAIC,SAAqB,GAAG;AAACC,IAAAA,MAAM,EAAC,EAAR;AAAWC,IAAAA,MAAM,EAAC;AAAlB,GAA5B;AACAL,EAAAA,KAAK,CAACM,GAAN,CAAW,GAAEL,QAAS,yBAAtB,EACKM,IADL,CACWC,SAAD,IAAe;AACjB,UAAMC,IAAI,GAAGD,SAAS,CAACC,IAAvB,CADiB,CACyB;;AAC1C,UAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,UAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,SAAS,CAACC,IAAtB;AACH,GANL;AAOA,QAAMS,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAC;AACHC,MAAAA,IAAI,EAAC;AADF;AADK,GAAhB,CAXoB,CAgBpB;AACA;AACA;AACA;;AACA,sBACG,QAAC,KAAD;AACK,IAAA,OAAO,EAAE,EAAC,GAAGF,OAAJ;AAAYd,MAAAA,MAAM,EAAED,SAAS,CAACC,MAA9B;AAAqCiB,MAAAA,MAAM,EAAC,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,SAAzC;AAA5C,KADd,CACgH;AADhH;AAEK,IAAA,MAAM,EAAElB,SAAS,CAACE,MAFvB;AAGK,IAAA,IAAI,EAAC,OAHV;AAIK,IAAA,MAAM,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,UADH,CAOM;AAPN;AASH,CA7BD;;KAAMH,U;AA8BN,eAAeA,UAAf","sourcesContent":["import Chart from 'react-apexcharts';\r\nimport { ModuleKind } from 'typescript';\r\nimport axios from 'axios'; \r\nimport { BASE_URL } from 'utils/requests';\r\nimport { SaleSum } from 'types/sale';\r\n\r\ntype ChartData = {\r\n    labels:string[];\r\n    series:number[];\r\n}\r\n\r\nconst DonutChart = () =>{\r\n\r\n    //FORMA ERRADA, certo com o hocks\r\n    let chartData : ChartData = {labels:[],series:[]};\r\n    axios.get(`${BASE_URL}/sales/amount-by-seller`)\r\n        .then((_response) => {\r\n            const data = _response.data as SaleSum[]; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\r\n            const myLabels = data.map(x => x.sellerName);\r\n            const muSeries = data.map(x => x.sum)\r\n            console.log(_response.data)\r\n        })\r\n    const options = {\r\n        legend:{\r\n            show:true\r\n        }\r\n    };\r\n    // const mockData = {\r\n    //     series:[477138,799928,444867,220426,473088],\r\n    //     labels: ['Anakin','Barry Alen', 'Karl-el','Logan','Padmé']\r\n    // }\r\n    return(\r\n       <Chart\r\n            options={{...options,labels: chartData.labels,colors:[\"#A03EAF\",\"#78058A\",\"#6B3473\",\"#886B8D\",\"#4E015A\"]}} //ela vai ser incorporada na definição do tsx, to dizendo aproveitar o options e vou passar mais argumentos para ele\r\n            series={chartData.series}\r\n            type=\"donut\"\r\n            height=\"240\" \r\n       \r\n       /> //retorna o componente do apexcharts que instalei, passo os dados como parametro\r\n    );\r\n}\r\nexport default DonutChart;"]},"metadata":{},"sourceType":"module"}