{"ast":null,"code":"var _jsxFileName = \"D:\\\\bootcamp-spring-react\\\\workspace\\\\frontend\\\\src\\\\components\\\\DonutChart\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport Chart from 'react-apexcharts';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { BASE_URL } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DonutChart = () => {\n  _s();\n\n  //chartData variavel que vai ser o dado, setChartData: função para alterar o dado, ChartData: tipo generico do chartData, entre () o valor inicial\n  const [chartData, setChartData] = useState({\n    labels: [],\n    series: []\n  }); //FORMA CORRETA, 1- primeiro parametro: a funçao que vai executar, 2 argumento: lista de objeto que o useEffect vai observar. com o useRequest, está ação so vai ser executada na\n  //instanciação do componente\n\n  useEffect(() => {\n    axios.get(`${BASE_URL}/sales/amount-by-seller`).then(_response => {\n      const data = _response.data; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\n\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n    });\n  }, []); //FORMA ERRADA, certo com o hocks, executando dessa forma, toda vez que o useState atualizar o estado, o componente vai verificar se tem algo para renderizar\n  // axios.get(`${BASE_URL}/sales/amount-by-seller`)\n  //     .then((_response) => {\n  //         const data = _response.data as SaleSum[]; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\n  //         const myLabels = data.map(x => x.sellerName);\n  //         const mySeries = data.map(x => x.sum)\n  //         setChartData({labels:myLabels, series: mySeries});\n  //         console.log(chartData)\n  //         console.log(_response.data)\n  //     })\n\n  const options = {\n    legend: {\n      show: true\n    }\n  }; // const mockData = {\n  //     series:[477138,799928,444867,220426,473088],\n  //     labels: ['Anakin','Barry Alen', 'Karl-el','Logan','Padmé']\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: chartData.labels,\n      colors: [\"#A03EAF\", \"#78058A\", \"#6B3473\", \"#886B8D\", \"#4E015A\"]\n    } //ela vai ser incorporada na definição do tsx, to dizendo aproveitar o options e vou passar mais argumentos para ele\n    ,\n    series: chartData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 8\n  }, this) //retorna o componente do apexcharts que instalei, passo os dados como parametro\n  ;\n};\n\n_s(DonutChart, \"w3Dp6C2oiT+8ptBGfBy87+2v6mE=\");\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["D:/bootcamp-spring-react/workspace/frontend/src/components/DonutChart/index.tsx"],"names":["Chart","useEffect","useState","axios","BASE_URL","DonutChart","chartData","setChartData","labels","series","get","then","_response","data","myLabels","map","x","sellerName","mySeries","sum","options","legend","show","colors"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;AAQA,MAAMC,UAAU,GAAG,MAAK;AAAA;;AACpB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAY;AAACM,IAAAA,MAAM,EAAC,EAAR;AAAWC,IAAAA,MAAM,EAAC;AAAlB,GAAZ,CAA1C,CAFoB,CAGpB;AACA;;AACAR,EAAAA,SAAS,CAAC,MAAI;AACNE,IAAAA,KAAK,CAACO,GAAN,CAAW,GAAEN,QAAS,yBAAtB,EACCO,IADD,CACOC,SAAD,IAAe;AACjB,YAAMC,IAAI,GAAGD,SAAS,CAACC,IAAvB,CADiB,CACyB;;AAC1C,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AACAZ,MAAAA,YAAY,CAAC;AAACC,QAAAA,MAAM,EAACM,QAAR;AAAkBL,QAAAA,MAAM,EAAES;AAA1B,OAAD,CAAZ;AACH,KAND;AAOL,GARM,EAQL,EARK,CAAT,CALoB,CAcpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAME,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAC;AACHC,MAAAA,IAAI,EAAC;AADF;AADK,GAAhB,CAxBoB,CA6BpB;AACA;AACA;AACA;;AACA,sBACG,QAAC,KAAD;AACK,IAAA,OAAO,EAAE,EAAC,GAAGF,OAAJ;AAAYZ,MAAAA,MAAM,EAAEF,SAAS,CAACE,MAA9B;AAAqCe,MAAAA,MAAM,EAAC,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,SAAzC;AAA5C,KADd,CACgH;AADhH;AAEK,IAAA,MAAM,EAAEjB,SAAS,CAACG,MAFvB;AAGK,IAAA,IAAI,EAAC,OAHV;AAIK,IAAA,MAAM,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,UADH,CAOM;AAPN;AASH,CA1CD;;GAAMJ,U;;KAAAA,U;AA2CN,eAAeA,UAAf","sourcesContent":["import Chart from 'react-apexcharts';\r\nimport { ModuleKind } from 'typescript';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios'; \r\nimport { BASE_URL } from 'utils/requests';\r\nimport { SaleSum } from 'types/sale';\r\n\r\ntype ChartData = {\r\n    labels:string[];\r\n    series:number[];\r\n}\r\n\r\nconst DonutChart = () =>{\r\n    //chartData variavel que vai ser o dado, setChartData: função para alterar o dado, ChartData: tipo generico do chartData, entre () o valor inicial\r\n    const [chartData, setChartData] = useState<ChartData>({labels:[],series:[]})\r\n    //FORMA CORRETA, 1- primeiro parametro: a funçao que vai executar, 2 argumento: lista de objeto que o useEffect vai observar. com o useRequest, está ação so vai ser executada na\r\n    //instanciação do componente\r\n    useEffect(()=>{\r\n            axios.get(`${BASE_URL}/sales/amount-by-seller`)\r\n            .then((_response) => {\r\n                const data = _response.data as SaleSum[]; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\r\n                const myLabels = data.map(x => x.sellerName);\r\n                const mySeries = data.map(x => x.sum)\r\n                setChartData({labels:myLabels, series: mySeries});\r\n            })\r\n      },[])\r\n    //FORMA ERRADA, certo com o hocks, executando dessa forma, toda vez que o useState atualizar o estado, o componente vai verificar se tem algo para renderizar\r\n    // axios.get(`${BASE_URL}/sales/amount-by-seller`)\r\n    //     .then((_response) => {\r\n    //         const data = _response.data as SaleSum[]; //data vai ser do tipo SaleSum( o tipo que é retornado da requisição e foi criado em sale.ts)\r\n    //         const myLabels = data.map(x => x.sellerName);\r\n    //         const mySeries = data.map(x => x.sum)\r\n    //         setChartData({labels:myLabels, series: mySeries});\r\n    //         console.log(chartData)\r\n    //         console.log(_response.data)\r\n    //     })\r\n    const options = {\r\n        legend:{\r\n            show:true\r\n        }\r\n    };\r\n    // const mockData = {\r\n    //     series:[477138,799928,444867,220426,473088],\r\n    //     labels: ['Anakin','Barry Alen', 'Karl-el','Logan','Padmé']\r\n    // }\r\n    return(\r\n       <Chart\r\n            options={{...options,labels: chartData.labels,colors:[\"#A03EAF\",\"#78058A\",\"#6B3473\",\"#886B8D\",\"#4E015A\"]}} //ela vai ser incorporada na definição do tsx, to dizendo aproveitar o options e vou passar mais argumentos para ele\r\n            series={chartData.series}\r\n            type=\"donut\"\r\n            height=\"240\" \r\n       \r\n       /> //retorna o componente do apexcharts que instalei, passo os dados como parametro\r\n    );\r\n}\r\nexport default DonutChart;"]},"metadata":{},"sourceType":"module"}